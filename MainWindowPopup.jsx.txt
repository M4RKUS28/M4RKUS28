// src/Components/MainWindow/Popup.jsx
import { useState, useEffect } from "react";
import styles from "./Popup.module.css";
import { fetchGames } from "../backend.js";
import { motion, AnimatePresence } from "framer-motion";
import { FiX, FiCheck, FiAlertTriangle, FiFilter, FiCalendar, FiInfo } from "react-icons/fi";

const server_address = import.meta.env.VITE_BACKEND_URL;

const PopupWindow = ({ packages, onClose, games, missingGames }) => {
    const [isLoading, setIsLoading] = useState(true);
    const [gamesData, setGamesData] = useState({});
    const [filterType, setFilterType] = useState("all"); // all, available, unavailable
    const [filteredGames, setFilteredGames] = useState([]);
    const [sortOrder, setSortOrder] = useState("date-asc"); // date-asc, date-desc

    // Fetch game data
    useEffect(() => {
        const fetchData = async () => {
            try {
                const data = await fetchGames(packages.map((pkg) => pkg.id), games.map((game) => game.id));
                setGamesData(data);
            } catch (error) {
                console.error("Failed to fetch game data:", error);
            } finally {
                setIsLoading(false);
            }
        };

        fetchData();
    }, [packages, games]);

    // Create lookup table for games in packages
    const packageGameLookup = {};
    Object.entries(gamesData).forEach(([packageId, games]) => {
        packageGameLookup[packageId] = new Map(games.map(game => [game.id, game]));
    });

    // Filter and sort games
    useEffect(() => {
        let filteredList = [...games];
        
        // Apply filtering
        if (filterType === "available") {
            filteredList = filteredList.filter(game => {
                return packages.some(pkg => packageGameLookup[pkg.id]?.has(game.id));
            });
        } else if (filterType === "unavailable") {
            filteredList = filteredList.filter(game => {
                return !packages.some(pkg => packageGameLookup[pkg.id]?.has(game.id));
            });
        } else if (filterType === "missing") {
            filteredList = [...missingGames];
        }
        
        // Apply sorting
        filteredList.sort((a, b) => {
            const dateA = new Date(a.starts_at);
            const dateB = new Date(b.starts_at);
            
            if (sortOrder === "date-asc") {
                return dateA - dateB;
            } else {
                return dateB - dateA;
            }
        });
        
        setFilteredGames(filteredList);
    }, [filterType, sortOrder, games, missingGames, gamesData, packageGameLookup, packages]);

    // Animation variants
    const overlayVariants = {
        hidden: { opacity: 0 },
        visible: { opacity: 1, transition: { duration: 0.3 } }
    };

    const popupVariants = {
        hidden: { opacity: 0, scale: 0.9 },
        visible: { opacity: 1, scale: 1, transition: { duration: 0.3 } }
    };

    // Format date
    const formatDate = (dateString) => {
        if (!dateString) return 'Date unavailable';
        return Intl.DateTimeFormat('de-DE', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: 'numeric',
            minute: 'numeric',
            hour12: false
        }).format(new Date(dateString));
    };

    // Loading state
    if (isLoading) {
        return (
            <motion.div 
                className={styles.popupOverlay}
                initial="hidden"
                animate="visible"
                exit="hidden"
                variants={overlayVariants}
            >
                <motion.div 
                    className={styles.popup}
                    variants={popupVariants}
                >
                    <div className={styles.header}>
                        <h2>Package Comparison</h2>
                        <button className={styles.closeButton} onClick={onClose} aria-label="Close">
                            <FiX />
                        </button>
                    </div>
                    <div className={styles.loaderContainer}>
                        <div className={styles.loader}></div>
                        <p>Loading game information...</p>
                    </div>
                </motion.div>
            </motion.div>
        );
    }

    return (
        <motion.div 
            className={styles.popupOverlay}
            initial="hidden"
            animate="visible"
            exit="hidden"
            variants={overlayVariants}
            onClick={(e) => {
                if (e.target === e.currentTarget) onClose();
            }}
        >
            <motion.div 
                className={styles.popup}
                variants={popupVariants}
                onClick={(e) => e.stopPropagation()}
            >
                <div className={styles.header}>
                    <h2>Package Comparison</h2>
                    <button className={styles.closeButton} onClick={onClose} aria-label="Close">
                        <FiX />
                    </button>
                </div>
                
                <div className={styles.filterControls}>
                    <div className={styles.filterGroup}>
                        <label htmlFor="filter-type" className={styles.filterLabel}>
                            <FiFilter /> Show:
                        </label>
                        <select 
                            id="filter-type" 
                            value={filterType}
                            onChange={(e) => setFilterType(e.target.value)}
                            className={styles.filterSelect}
                        >
                            <option value="all">All Games</option>
                            <option value="available">Available Games</option>
                            <option value="unavailable">Unavailable Games</option>
                            <option value="missing">Missing Games</option>
                        </select>
                    </div>
                    
                    <div className={styles.filterGroup}>
                        <label htmlFor="sort-order" className={styles.filterLabel}>
                            <FiCalendar /> Sort:
                        </label>
                        <select 
                            id="sort-order" 
                            value={sortOrder}
                            onChange={(e) => setSortOrder(e.target.value)}
                            className={styles.filterSelect}
                        >
                            <option value="date-asc">Date (Ascending)</option>
                            <option value="date-desc">Date (Descending)</option>
                        </select>
                    </div>
                </div>
                
                <div className={styles.packageSummary}>
                    <h3>Included Packages</h3>
                    <div className={styles.packageList}>
                        {packages.map((pkg) => (
                            <div key={pkg.id} className={styles.packageItem}>
                                <img src={server_address + pkg.logo} alt={pkg.name} className={styles.packageLogo} />
                                <div className={styles.packageDetails}>
                                    <h4>{pkg.name}</h4>
                                    <div className={styles.pricingInfo}>
                                        {pkg.monthly_price_cents !== -1 && (
                                            <span className={styles.price}>
                                                {(pkg.monthly_price_cents / 100).toFixed(2)}€ <span className={styles.pricePeriod}>/ month</span>
                                            </span>
                                        )}
                                        {pkg.monthly_price_yearly_subscription_in_cents !== -1 && (
                                            <span className={styles.price}>
                                                {(pkg.monthly_price_yearly_subscription_in_cents / 100).toFixed(2)}€ <span className={styles.pricePeriod}>/ year</span>
                                            </span>
                                        )}
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
                
                <div className={styles.tableContainer}>
                    <table className={styles.comparisonTable}>
                        <thead>
                            <tr>
                                <th className={styles.dateColumn}>Date</th>
                                <th className={styles.gameColumn}>Match</th>
                                {packages.map(pkg => (
                                    <th key={pkg.id} className={styles.packageColumn}>
                                        <div className={styles.packageColumnHeader}>
                                            <img 
                                                src={server_address + pkg.logo} 
                                                alt={pkg.name} 
                                                className={styles.tablePackageLogo} 
                                            />
                                        </div>
                                    </th>
                                ))}
                            </tr>
                        </thead>
                        <tbody>
                            {filteredGames.map(game => (
                                <tr key={game.id} className={
                                    filterType === "missing" ? styles.missingGameRow : 
                                    packages.some(pkg => packageGameLookup[pkg.id]?.has(game.id)) ? 
                                        styles.availableGameRow : styles.unavailableGameRow
                                }>
                                    <td className={styles.dateCell}>
                                        {formatDate(game.starts_at)}
                                    </td>
                                    <td className={styles.gameCell}>
                                        <div className={styles.matchInfo}>
                                            <div className={styles.teams}>
                                                {game.team_home} vs {game.team_away}
                                            </div>
                                            <div className={styles.tournament}>
                                                {game.tournament_name}
                                            </div>
                                        </div>
                                    </td>
                                    {packages.map(pkg => {
                                        const gameInPackage = packageGameLookup[pkg.id]?.get(game.id);
                                        const status = gameInPackage ? 
                                            (gameInPackage.live ? "live" : "highlight") : "unavailable";
                                        const tooltipText = gameInPackage ?
                                            (gameInPackage.live ? "Live verfügbar" : "Als Highlight verfügbar") :
                                            "Nicht verfügbar";
                                            
                                        return (
                                            <td 
                                                key={`${pkg.id}-${game.id}`} 
                                                className={`${styles.availabilityCell} ${styles[status]}`}
                                            >
                                                <div className={styles.availabilityStatus}>
                                                    {status === "live" ? (
                                                        <FiCheck className={styles.availableIcon} />
                                                    ) : status === "highlight" ? (
                                                        <FiInfo className={styles.highlightIcon} />
                                                    ) : (
                                                        <FiX className={styles.unavailableIcon} />
                                                    )}
                                                    <span className={styles.statusTooltip}>{tooltipText}</span>
                                                </div>
                                            </td>
                                        );
                                    })}
                                </tr>
                            ))}
                            
                            {filteredGames.length === 0 && (
                                <tr>
                                    <td colSpan={packages.length + 2} className={styles.noGamesMessage}>
                                        <FiAlertTriangle />
                                        No games match the current filter criteria
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>
            </motion.div>
        </motion.div>
    );
};

export default PopupWindow;