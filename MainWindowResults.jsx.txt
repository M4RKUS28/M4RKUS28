// src/Components/MainWindow/Results.jsx
import { useState } from "react";
import styles from "./Results.module.css";
import PopupWindow from "./Popup.jsx";
import { motion } from "framer-motion";
import { FiChevronDown, FiChevronUp, FiInfo, FiX, FiCheck, FiEye, FiTag } from "react-icons/fi";

// Mapping properties to colors and descriptions
const propertyDetails = {
  "Günstigste Option": {
    color: "#38a169", // green
    icon: <FiTag />,
    tooltip: "Niedrigste Gesamtkosten mit Abdeckung aller Spiele"
  },
  "Beste Option": {
    color: "#3182ce", // blue
    icon: <FiCheck />,
    tooltip: "Empfehlung: Beste Kombi aus Preis und Abdeckung"
  },
  "Meiste Extra-Spiele": {
    color: "#dd6b20", // orange
    icon: <FiInfo />,
    tooltip: "Maximiert deine Auswahl an zusätzlichen Fußballspielen über deine Favoriten hinaus."
  },
  "Minimale Option": {
    color: "#805ad5", // purple
    icon: <FiInfo />,
    tooltip: "Minimale Anzahl an Anbietern mit Abdeckung aller ausgewählten Spiele."
  },
  "Monatlich kündbar": {
    color: "#2d3748", // dark gray
    icon: <FiInfo />,
    tooltip: "Alle Anbieter sind monatlich kündbar – maximale Flexibilität."
  },
  "Live": {
    color: "#e53e3e", // red
    icon: <FiEye />,
    tooltip: "Sämtliche Spiele live, nicht nur als Highlight."
  }
};

const server_address = import.meta.env.VITE_BACKEND_URL;

function PropertyBadge({ property }) {
  const details = propertyDetails[property] || {
    color: "gray",
    icon: <FiInfo />,
    tooltip: property
  };

  return (
    <div 
      className={styles.PropertyBadge}
      style={{ borderColor: details.color }}
    >
      <div className={styles.PropertyIconContainer} style={{ backgroundColor: details.color }}>
        {details.icon}
      </div>
      <span className={styles.PropertyText}>{property}</span>
      <span className={styles.PropertyTooltip}>{details.tooltip}</span>
    </div>
  );
}

function ResultCard({ packages, price, properties, games, missingGames, index }) {
  const [showPopup, setShowPopup] = useState(false);
  const [expanded, setExpanded] = useState(false);

  const handleDetailsClick = () => {
    setShowPopup(true);
  };

  const handleClosePopup = () => {
    setShowPopup(false);
  };

  const toggleExpanded = () => {
    setExpanded(!expanded);
  };

  const containerVariants = {
    initial: { opacity: 0, y: 50 },
    animate: { 
      opacity: 1, 
      y: 0,
      transition: { 
        duration: 0.5,
        delay: index * 0.1 
      }
    },
    hover: {
      y: -5,
      boxShadow: "0 10px 25px rgba(0, 0, 0, 0.2)",
    }
  };

  // Determine if this is the "Beste Option"
  const isBestOption = properties.includes("Beste Option");

  return (
    <motion.div 
      className={`${styles.ResultCard} ${isBestOption ? styles.BestOptionCard : ''}`}
      variants={containerVariants}
      initial="initial"
      animate="animate"
      whileHover="hover"
    >
      {isBestOption && (
        <div className={styles.BestOptionBadge}>
          <FiCheck /> Recommended
        </div>
      )}

      <div className={styles.CardHeader}>
        <div className={styles.PropertiesContainer}>
          {properties.slice(0, expanded ? properties.length : 3).map((property, idx) => (
            <PropertyBadge key={idx} property={property} />
          ))}
          
          {properties.length > 3 && !expanded && (
            <button 
              className={styles.MorePropertiesButton} 
              onClick={toggleExpanded}
              aria-label="Show more properties"
            >
              +{properties.length - 3}
            </button>
          )}

          {properties.length > 3 && expanded && (
            <button 
              className={styles.ExpandToggleButton} 
              onClick={toggleExpanded}
              aria-label="Show less properties"
            >
              <FiChevronUp />
            </button>
          )}
        </div>
      </div>

      <div className={styles.CardBody}>
        <div className={styles.PackagesContainer}>
          {packages.map((pkg, idx) => (
            <motion.div 
              key={idx} 
              className={styles.PackageItem}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <img 
                className={styles.PackageLogo} 
                src={server_address + pkg.logo} 
                alt={pkg.name} 
                title={pkg.name} 
              />
              <span className={styles.PackageName}>{pkg.name}</span>
            </motion.div>
          ))}
        </div>
        
        <div className={styles.PriceContainer}>
          <div className={styles.PriceValue}>{(price/100).toFixed(2)}€</div>
          <div className={styles.PriceLabel}>per month</div>
          
          <motion.button 
            className={styles.DetailsButton}
            onClick={handleDetailsClick}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            View Details
          </motion.button>
        </div>
      </div>
      
      {showPopup && (
        <PopupWindow 
          packages={packages} 
          onClose={handleClosePopup} 
          games={games} 
          missingGames={missingGames} 
        />
      )}
    </motion.div>
  );
}

function Results({ resultLoaded, results, games, missingGames }) {
  // State for sorting and filtering options
  const [sortOption, setSortOption] = useState("recommended");
  
  // Sort results based on selected option
  const sortedResults = [...(results || [])].sort((a, b) => {
    if (sortOption === "price-low") {
      return a.price - b.price;
    } else if (sortOption === "price-high") {
      return b.price - a.price;
    } else if (sortOption === "recommended") {
      // First sort by "Beste Option", then by price
      const aHasBest = a.properties.includes("Beste Option") ? 1 : 0;
      const bHasBest = b.properties.includes("Beste Option") ? 1 : 0;
      if (aHasBest !== bHasBest) return bHasBest - aHasBest;
      return a.price - b.price;
    }
    return 0;
  });

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        staggerChildren: 0.1,
        delayChildren: 0.3
      }
    }
  };

  return (
    <div className={styles.ResultsContainer}>
      {resultLoaded === 2 && results && results.length > 0 && (
        <div className={styles.ResultsHeader}>
          <h2>Package Recommendations</h2>
          <div className={styles.SortContainer}>
            <label htmlFor="sort-options">Sort by:</label>
            <select 
              id="sort-options" 
              value={sortOption}
              onChange={(e) => setSortOption(e.target.value)}
              className={styles.SortSelect}
            >
              <option value="recommended">Recommended</option>
              <option value="price-low">Price: Low to High</option>
              <option value="price-high">Price: High to Low</option>
            </select>
          </div>
        </div>
      )}
      
      <motion.div 
        className={styles.ResultsList}
        variants={containerVariants}
        initial="hidden"
        animate={resultLoaded === 2 && results && results.length > 0 ? "visible" : "hidden"}
      >
        {resultLoaded === 2 ? (
          sortedResults && sortedResults.length > 0 ? (
            sortedResults.map((result, index) => (
              <ResultCard 
                key={index} 
                packages={result.packages} 
                price={result.price} 
                properties={result.properties} 
                games={games} 
                missingGames={missingGames}
                index={index}
              />
            ))
          ) : (
            <motion.div 
              className={styles.NoResults}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
            >
              <FiX className={styles.NoResultsIcon} />
              <h3>No Packages Available</h3>
              <p>Try adjusting your filter criteria to see more results.</p>
            </motion.div>
          )
        ) : resultLoaded === 1 ? (
          <div className={styles.LoadingContainer}>
            <div className={styles.LoadingSpinner}></div>
            <div className={styles.LoadingText}>Finding the best packages for you...</div>
          </div>
        ) : null}
      </motion.div>
    </div>
  );
}

export default Results;