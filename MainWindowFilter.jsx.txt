// src/Components/MainWindow/Filter.jsx
import { useEffect, useState } from "react";
import styles from "./Filter.module.css";
import { FiChevronDown, FiChevronUp, FiSearch, FiFilter, FiX, FiCheck } from "react-icons/fi";
import { motion, AnimatePresence } from "framer-motion"; // Install framer-motion

function Favorite({ favorite, onClick, isClicked, type }) {
  const sanitizedType = type.replace(/\s+/g, '_');
  const className = `${styles.Favorite} ${isClicked ? styles[`Clicked${sanitizedType}`] : ''}`;
  
  return (
    <motion.button
      className={className}
      onClick={onClick}
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.2 }}
    >
      {isClicked && <FiCheck className={styles.CheckIcon} />}
      <span>{favorite}</span>
    </motion.button>
  );
}

function FilterSection({ 
  title, 
  data, 
  topData, 
  shownData, 
  setShownData, 
  clickedData, 
  setClickedData, 
  filterText, 
  setFilterText, 
  defaultStatus 
}) {
  const [allChecked, setAllChecked] = useState(defaultStatus);
  const [expanded, setExpanded] = useState(true);

  const handleCheckboxChange = (event) => {
    setAllChecked(event.target.checked);
    if (event.target.checked) {
      setClickedData(data);
    } else {
      setClickedData([]);
    }
  };

  const handleFavoriteClick = (f) => {
    setClickedData((prev) =>
      prev.includes(f)
        ? prev.filter((f1) => f1 !== f)
        : [...prev, f]
    );
  };

  const handleFilterChange = (event) => {
    const text = event.target.value.toLowerCase();
    setFilterText(text);

    if (text === "") {
      setShownData([...new Set([...topData, ...clickedData])]);
    } else {
      const filteredData = data.filter((item) => {
        const name = typeof item === "string" ? item : item.name;
        return name.toLowerCase().includes(text);
      });
      setShownData([...new Set([...filteredData])]);
    }
  };

  const clearFilterText = () => {
    setFilterText("");
    setShownData([...new Set([...topData, ...clickedData])]);
  };

  return (
    <div className={styles.FilterSection}>
      <div 
        className={styles.SectionHeader} 
        onClick={() => setExpanded(!expanded)}
      >
        <h3>{title}</h3>
        <div className={styles.HeaderActions}>
          <span className={styles.SelectedCount}>
            {clickedData.length} selected
          </span>
          {expanded ? <FiChevronUp /> : <FiChevronDown />}
        </div>
      </div>
      
      <AnimatePresence>
        {expanded && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
            className={styles.SectionContent}
          >
            <div className={styles.SearchContainer}>
              <FiSearch className={styles.SearchIcon} />
              <input
                type="text"
                value={filterText}
                onChange={handleFilterChange}
                placeholder={`Search ${title}`}
                className={styles.SearchInput}
              />
              {filterText && (
                <button 
                  className={styles.ClearButton} 
                  onClick={clearFilterText}
                >
                  <FiX />
                </button>
              )}
            </div>
            
            <div className={styles.FavoriteContainer}>
              {Array.isArray(shownData) && shownData.length > 0 ? (
                shownData.map((favorite, index) => (
                  <Favorite
                    key={index}
                    favorite={favorite}
                    onClick={() => handleFavoriteClick(favorite)}
                    isClicked={clickedData.includes(favorite)}
                    type={title}
                  />
                ))
              ) : (
                <p className={styles.NoData}>No matches found</p>
              )}
            </div>
            
            <label className={styles.CheckboxContainer}>
              <input
                type="checkbox"
                checked={allChecked}
                onChange={handleCheckboxChange}
                className={styles.Checkbox}
              />
              <span className={styles.CheckboxLabel}>Select All {title}</span>
            </label>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

function Filter({
  onFetch,
  teams,
  clickedTeams,
  topTeams,
  leagues,
  clickedLeagues,
  topLeagues,
  streamingServices,
  clickedStreamingServices,
  setClickedTeams,
  setClickedLeagues,
  setClickedStreamingServices
}) {
  const [shownTeams, setShownTeams] = useState(topTeams || []);
  const [shownLeagues, setShownLeagues] = useState(topLeagues || []);
  const [shownServices, setShownServices] = useState(streamingServices || []);

  const [filterTextTeams, setFilterTextTeams] = useState("");
  const [filterTextLeagues, setFilterTextLeagues] = useState("");
  const [filterTextServices, setFilterTextServices] = useState("");
  
  const [isFiltersOpen, setIsFiltersOpen] = useState(true);

  useEffect(() => {
    if (filterTextTeams === "") {
      setShownTeams([...new Set([...(topTeams || []), ...(clickedTeams || [])])]);
    }
  }, [clickedTeams, topTeams]);

  useEffect(() => {
    if (filterTextLeagues === "") {
      setShownLeagues([...new Set([...(topLeagues || []), ...(clickedLeagues || [])])]);
    }
  }, [clickedLeagues, topLeagues]);

  useEffect(() => {
    if (filterTextServices === "") {
      setShownServices(streamingServices || []);
    }
  }, [streamingServices]);

  const toggleFilters = () => {
    setIsFiltersOpen(!isFiltersOpen);
  };

  return (
    <div className={styles.FilterContainer}>
      <div className={styles.FilterHeader}>
        <h2>Find Your Perfect Streaming Package</h2>
        <p>Select your favorite teams, leagues, and streaming services to get personalized recommendations</p>
        
        <button 
          className={styles.ToggleButton} 
          onClick={toggleFilters}
          aria-label={isFiltersOpen ? "Collapse filters" : "Expand filters"}
        >
          <FiFilter /> {isFiltersOpen ? "Hide Filters" : "Show Filters"}
        </button>
      </div>
      
      <AnimatePresence>
        {isFiltersOpen && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
            className={styles.FiltersWrapper}
          >
            <div className={styles.FilterSections}>
              <FilterSection
                title="Teams"
                data={teams || []}
                topData={topTeams || []}
                shownData={shownTeams}
                setShownData={setShownTeams}
                clickedData={clickedTeams || []}
                setClickedData={setClickedTeams}
                filterText={filterTextTeams}
                setFilterText={setFilterTextTeams}
                defaultStatus={false}
              />
              
              <FilterSection
                title="Leagues"
                data={leagues || []}
                topData={topLeagues || []}
                shownData={shownLeagues}
                setShownData={setShownLeagues}
                clickedData={clickedLeagues || []}
                setClickedData={setClickedLeagues}
                filterText={filterTextLeagues}
                setFilterText={setFilterTextLeagues}
                defaultStatus={false}
              />
              
              <FilterSection
                title="Services"
                data={streamingServices || []}
                topData={streamingServices || []}
                shownData={shownServices}
                setShownData={setShownServices}
                clickedData={clickedStreamingServices || []}
                setClickedData={setClickedStreamingServices}
                filterText={filterTextServices}
                setFilterText={setFilterTextServices}
                defaultStatus={true}
              />
            </div>
          </motion.div>
        )}
      </AnimatePresence>
      
      <motion.button 
        className={styles.FetchButton}
        onClick={onFetch}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.2 }}
      >
        Find Best Combinations
      </motion.button>
    </div>
  );
}

export default Filter;