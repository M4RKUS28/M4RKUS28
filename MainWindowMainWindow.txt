// src/Components/MainWindow/MainWindow.jsx
import { useEffect, useState, useContext } from "react";
import styles from "./MainWindow.module.css";
import Filter from "./Filter";
import Results from "./Results";
import { ThemeContext } from "../../context/ThemeContext";
import { motion } from "framer-motion";
import { getAllTeams, getAllLeagues, getResults, getStreamingServices, getTopLeagues, getTopTeams } from "../backend.js";

function MainWindow() {
    const { darkMode } = useContext(ThemeContext);
    
    // Results state
    const [resultLoaded, setResultLoaded] = useState(0);
    const [results, setResult] = useState([]);
    const [games, setGames] = useState([]);
    const [missingGames, setMissingGames] = useState([]);

    // Filter data state
    const [teams, setTeams] = useState([]);
    const [clickedTeams, setClickedTeams] = useState([]);
    const [topTeams, setTopTeams] = useState([]);

    const [leagues, setLeagues] = useState([]);
    const [clickedLeagues, setClickedLeagues] = useState([]);
    const [topLeagues, setTopLeagues] = useState([]);

    const [streamingServices, setStreamingServices] = useState([]);
    const [clickedStreamingServices, setClickedStreamingServices] = useState([]);

    // Load initial data
    useEffect(() => {
        const fetchData = async () => {
            try {
                const [fetchedTeams, fetchedTopTeams, fetchedLeagues, fetchedTopLeagues, fetchedStreamingServices] = await Promise.all([
                    getAllTeams(),
                    getTopTeams(),
                    getAllLeagues(),
                    getTopLeagues(),
                    getStreamingServices(),
                ]);

                setTeams(fetchedTeams);
                setTopTeams(fetchedTopTeams.map(team => team[1]));
                setLeagues(fetchedLeagues);
                setTopLeagues(fetchedTopLeagues.map(league => league[1]));
                const services = fetchedStreamingServices.map(service => service.name);
                setStreamingServices(services);
                setClickedStreamingServices(services);
            } catch (error) {
                console.error("Error loading initial data:", error);
            }
        };
        
        fetchData();
    }, []);

    // Handle fetch results
    const handleFetchClick = async () => {
        setResultLoaded(1);
        setResult([]);

        try {
            await getResults(clickedTeams, clickedLeagues, clickedStreamingServices, handleNewData);
            
            // Scroll to results
            setTimeout(() => {
                const resultsElement = document.getElementById('results-section');
                if (resultsElement) {
                    resultsElement.scrollIntoView({ behavior: 'smooth' });
                }
            }, 500);
            
        } catch (error) {
            console.error("Error fetching results:", error);
            setResultLoaded(0);
        }
    };

    // Handle streaming data updates
    function handleNewData(newData) {
        setResult(prevResults => {
            // Find if there's already a result with the same "packages"
            const index = prevResults.findIndex(res =>
                JSON.stringify(newData["packages"].sort()) === JSON.stringify(res["packages"].sort())
            );
    
            if (index >= 0) {
                // If match is found, update properties
                const updatedResults = [...prevResults];
                updatedResults[index] = {
                    ...updatedResults[index],
                    properties: [
                        ...new Set([...updatedResults[index]["properties"], ...newData["properties"]])
                    ]
                };
                return updatedResults;
            }
            
            // Update games data if provided
            if(newData["new_game_list"]) {
                setGames(newData["games"]);
            }
            if(newData["missing_games"]) {
                setMissingGames(newData["missing_games"]);
            }
            
            // Add new result
            return [...prevResults, newData];
        });
    
        setResultLoaded(2);
    }

    return (
        <div className={`${styles.MainWindow} ${darkMode ? styles.darkMode : styles.lightMode}`}>
            <div className={styles.Hero}>
                <motion.div 
                    className={styles.HeroContent}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6 }}
                >
                    <h1>Find Your Perfect Sports Streaming Package</h1>
                    <p>Select your favorite teams and leagues to discover the best streaming service combination for your needs</p>
                </motion.div>
            </div>
            
            <Filter 
                onFetch={handleFetchClick}
                teams={teams} 
                topTeams={topTeams} 
                clickedTeams={clickedTeams} 
                setClickedTeams={setClickedTeams}
                leagues={leagues} 
                clickedLeagues={clickedLeagues} 
                topLeagues={topLeagues} 
                setClickedLeagues={setClickedLeagues}
                streamingServices={streamingServices} 
                clickedStreamingServices={clickedStreamingServices} 
                setClickedStreamingServices={setClickedStreamingServices}
            />
            
            <div id="results-section" className={styles.ResultsSection}>
                <Results 
                    resultLoaded={resultLoaded} 
                    results={results} 
                    games={games} 
                    missingGames={missingGames} 
                />
            </div>
        </div>
    );
}

export default MainWindow;